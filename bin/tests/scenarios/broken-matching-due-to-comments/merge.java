  package     br . ufpe . cin . mergers . util ;   import   java . io . File ;  import     br . ufpe . cin . app . JFSTMerge ;  import     br . ufpe . cin . files . FilesManager ;  import      de . ovgu . cide . fstgen . ast . FSTNode ;  import      de . ovgu . cide . fstgen . ast . FSTNonTerminal ;  import      de . ovgu . cide . fstgen . ast . FSTTerminal ;   public class MergeConflict  {   private final String  left ;   private final String  base ;   private final String  right ;   private final String  body ;   private final String  message ;   private  int  startLOC ;   private  int  endLOC ;   private File  leftOriginFile ;   private File  baseOriginFile ;   private File  rightOriginFile ;   private String  fullyQualifiedMergedClass ;   public static final String  MINE_CONFLICT_MARKER = "<<<<<<< MINE" ;   public static final String  BASE_CONFLICT_MARKER = "||||||| BASE" ;   public static final String  CHANGE_CONFLICT_MARKER = "=======" ;   public static final String  YOURS_CONFLICT_MARKER = ">>>>>>> YOURS" ;   private String getNodeContent  (  FSTNode node )  {  if  (  node == null )  {  return "" ; } else  if  (  node instanceof FSTTerminal )  {  return  IndentationUtils . indentFirstLine  (  ( FSTTerminal ) node ) ; } else  {  return  FilesManager . prettyPrint  (  ( FSTNonTerminal ) node ) ; } }   private String assembleBody  ( )  {  StringBuilder  conflict =  new StringBuilder  ( ) ;      conflict . append  ( MINE_CONFLICT_MARKER ) . append  ( '\n' ) . append  ( left ) . append  ( '\n' ) ;  if  (  JFSTMerge . showBase )  {      conflict . append  ( BASE_CONFLICT_MARKER ) . append  ( '\n' ) . append  ( base ) . append  ( '\n' ) ; }   conflict . append  ( CHANGE_CONFLICT_MARKER ) ;  if  (  JFSTMerge . showConflictMessages )  {   conflict . append  (  " " + message ) ; }      conflict . append  ( '\n' ) . append  ( right ) . append  ( '\n' ) . append  ( YOURS_CONFLICT_MARKER ) ;  return  conflict . toString  ( ) ; }   public MergeConflict  (  String left ,  String base ,  String right ,  String message )  {    this . left = left ;    this . base = base ;    this . right = right ;    this . message = message ;    this . body =  assembleBody  ( ) ; }   public boolean contains  (  String leftPattern ,  String rightPattern )  {  if  (   leftPattern . isEmpty  ( ) ||  rightPattern . isEmpty  ( ) )  {  return false ; } else  {   leftPattern =   (  leftPattern . replaceAll  ( "\\r\\n|\\r|\\n" , "" ) ) . replaceAll  ( "\\s+" , "" ) ;   rightPattern =   (  rightPattern . replaceAll  ( "\\r\\n|\\r|\\n" , "" ) ) . replaceAll  ( "\\s+" , "" ) ;  String  lefttrim =   (   this . left . replaceAll  ( "\\r\\n|\\r|\\n" , "" ) ) . replaceAll  ( "\\s+" , "" ) ;  String  righttrim =   (   this . right . replaceAll  ( "\\r\\n|\\r|\\n" , "" ) ) . replaceAll  ( "\\s+" , "" ) ;  return  (   lefttrim . contains  ( leftPattern ) &&  righttrim . contains  ( rightPattern ) ) ; } }   public void setOriginFiles  (  File left ,  File base ,  File right )  {    this . leftOriginFile = left ;    this . rightOriginFile = right ;    this . baseOriginFile = base ; }   public String getFullyQualifiedMergedClass  ( )  {  return fullyQualifiedMergedClass ; }   public void setFullyQualifiedMergedClass  (  String fullyQualifiedMergedClass )  {    this . fullyQualifiedMergedClass = fullyQualifiedMergedClass ; }    @ Override public String toString  ( )  {  return  this . body ; }   public String getLeft  ( )  {  return left ; }   public String getBase  ( )  {  return base ; }   public String getRight  ( )  {  return right ; }   public  int getStartLOC  ( )  {  return startLOC ; }   public  int getEndLOC  ( )  {  return endLOC ; }   public MergeConflict  (  FSTNode left ,  FSTNode base ,  FSTNode right ,  String message )  {    this . left =  getNodeContent  ( left ) ;    this . base =  getNodeContent  ( base ) ;    this . right =  getNodeContent  ( right ) ;    this . message = message ;    this . body =  assembleBody  ( ) ; }   public MergeConflict  (  FSTTerminal left ,  FSTTerminal base ,  FSTTerminal right ,  String message ,   int startLOC ,   int endLOC )  {  this  ( left , base , right , message ) ;    this . startLOC = startLOC ;    this . endLOC = endLOC ; }   public MergeConflict  (  String left ,  String base ,  String right ,  String message ,   int startLOC ,   int endLOC )  {  this  ( left , base , right , message ) ;    this . startLOC = startLOC ;    this . endLOC = endLOC ; } }